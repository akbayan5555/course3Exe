----1------
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

df = pd.DataFrame(data=X, columns=iris_data.feature_names)
df['species'] = y

print("The first 5 rows of the dataset:")
print(df.head())
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel accuracy: {accuracy:.2f}")
sample = np.array([[5.1, 3.5, 1.4, 0.2]])
prediction = model.predict(sample)
print(f"A predicted class for a new flower: {iris_data.target_names[prediction][0]}")
-----2------
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
data = { 'outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain'],
'temperature': ['hot', 'hot', 'hot', 'mild', 'cool', 'cool', 'mild', 'mild', 'cool', 'mild', 'mild', 'hot', 'cool', 'mild'],
'humidity': ['high', 'high', 'high', 'high', 'normal', 'normal', 'normal', 'high', 'normal', 'normal', 'normal', 'normal', 'high', 'normal'],
'windy': [False, True, False, False, False, True, True, False, False, False, True, True, False, True],
'play': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']}
df = pd.DataFrame(data)
df['outlook'] = df['outlook'].map({'sunny': 0, 'overcast': 1, 'rain': 2})
df['temperature'] = df['temperature'].map({'hot': 0, 'mild': 1, 'cool': 2})
df['humidity'] = df['humidity'].map({'high': 0, 'normal': 1})
df['play'] = df['play'].map({'no': 0, 'yes': 1})
X = df[['outlook', 'temperature', 'humidity', 'windy']]
y = df['play']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:.2f}")
new_day = pd.DataFrame([[0, 1, 1, False]], columns=['outlook', 'temperature', 'humidity', 'windy'])
prediction = model.predict(new_day)
print(f"Predicted outcome for the new day: {'Play' if prediction[0] == 1 else 'Not'}")
